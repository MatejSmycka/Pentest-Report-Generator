function findingGenerator() {
    function cvss() {
        /* CVSS RATING */

        cvss = 0;

        metricWeightAV = 0;
        metricWeightAC = 0;
        metricWeightPR = 0;
        metricWeightUI = 0;

        metricWeightC = 0;
        metricWeightI = 0;
        metricWeightA = 0;

        metricWeightS = 0;

        if (av == 'N') {
            metricWeightAV = 0.85
        }
        if (av == 'A') {
            metricWeightAV = 0.62
        }
        if (av == 'L') {
            metricWeightAV = 0.55
        }
        if (av == 'P') {
            metricWeightAV = 0.2
        }

        if (ac == 'H') {
            metricWeightAC = 0.44
        }
        if (ac == 'L') {
            metricWeightAC = 0.77
        }

        if (pr == 'N') {
            metricWeightPR = 0.85
        }
        if (pr == 'L') {
            metricWeightPR = 0.62
        }
        if (pr == 'H') {
            metricWeightPR = 0.27
        }

        if (ui == 'N') {
            metricWeightUI = 0.85
        }
        if (ui == 'R') {
            metricWeightUI = 0.62
        }

        if (s == 'U') {
            metricWeightS = 6.42
        }
        if (s == 'C') {
            metricWeightS = 7.52
        }

        if (cc == 'N') {
            metricWeightC = 0
        }
        if (cc == 'L') {
            metricWeightC = 0.22
        }
        if (cc == 'H') {
            metricWeightC = 0.56
        }

        if (ci == 'N') {
            metricWeightI = 0
        }
        if (ci == 'L') {
            metricWeightI = 0.22
        }
        if (ci == 'H') {
            metricWeightI = 0.56
        }

        if (ca == 'N') {
            metricWeightA = 0
        }
        if (ca == 'L') {
            metricWeightA = 0.22
        }
        if (ca == 'H') {
            metricWeightA = 0.56
        }

        iss = (1 - ((1 - metricWeightC) * (1 - metricWeightI) * (1 - metricWeightA)));
        impact = 0;
        if (s == "U") {
            impact = metricWeightS * iss;
        } else {
            impact = metricWeightS * (iss - 0.029) - 3.25 * Math.pow(iss - 0.02, 15);
        }
        exploitability = 8.22 * metricWeightAV * metricWeightAC * metricWeightPR * metricWeightUI;
        if (impact <= 0) {} else {
            if (s == "U") {
                cvss = exploitability + impact;
            } else {
                cvss = 1.22 * (exploitability + impact);
            }
        }
        if (cvss > 10) {
            cvss = 10
        }
        cvss = Math.round(cvss * 100) / 100
        if (cvss >= 9) {
            severity = 'Critical'
            color = 'red'
        } else if (cvss >= 7) {
            severity = 'High'
            color = 'red'
        } else if (cvss >= 4) {
            severity = 'Medium'
            color = 'orange'
        } else if (cvss > 0) {
            severity = 'Low'
            color = 'green'
        } else {
            severity = 'Info'
            color = 'cyan'
        }
    }

    function field_evaluation() {
        /* FIELD EVAL. */
        if (cvss != "") {
            cvss = '\\hline Severity: & \\textcolor{' + color + '}{CVSS ' + cvss + ' - ' + severity + '} ' + cvss1 + '\\\\\n'
        }
        if (imp != "") {
            imp = '\\hline Impact: & ' + imp + ' \\\\\n '
        }
        if (host != "") {
            host = '\\hline Hosts: & ' + host + ' \\\\\n '
        }
        if (role != "") {
            role = '\\hline Role: &' + role + ' \\\\\n '
        }
        if (desc != "") {
            desc = '\\subsubsection*{Description} \\\\ ' + desc + ' \\\\\\\\ '
        }
        if (impactf != "") {
            impactf = '\\subsubsection*{Bussines impact}\\\\ ' + impactf + ' \\\\\\\\ '
        }
        if (rem != "") {
            rem = '\\subsubsection*{Remedation}\\\\ ' + rem + ' \\\\\\\\ '
        }
        if (resc != "") {
            resc = '\\subsubsection*{References}\\\\ ' + resc + ' \\\\\\\\ '
        }
        if (steps != "") {
            steps = '\\subsubsection*{Steps to reproduce}\\\\ ' + steps + ' \\\\\\\\ '
        }
        output =
            '<meta charset="UTF-8">\n' +
            '<title>Generator</title>\n' +
            '<link rel="stylesheet" href="https://fonts.google.com/specimen/Roboto" />\n' +
            '<link rel="stylesheet" href="GeneratorStyle.css"><textarea  rows="25" cols="100" style="color:black;">' +
            '\\subsection{' + name + '}' +
            '\\begin{table}[h]\n' +
            '\\centering\n' +
            '\\begin{tabular}{|l|r|}\n' +
            '\\rowcolor{' + color + '}\n' +
            '\\hline & \\\\\n' +
            cvss +
            imp +
            host +
            role +
            '\\hline\n' +
            '\\end{tabular}\n' +
            '\\end{table}\n' +
            desc +
            impactf +
            rem +
            resc +
            steps +
            '\n</textarea><br><br><br><a href="FindingGenerator.html">Nov√Ω finding</a>';
    }

    function regexing_output() {
        /* REGEX REPLACING*/
        reg_url = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
        reg_img = /\.(gif|jpe?g|tiff?|png|webp|bmp)$/i;
        text = output.split(' ')
        for (i = 0; i < text.length; i++) {
            if (text[i].match(reg_url)) {
                part_of_url = text[i].substr(text[i].lastIndexOf('/') + 1);
                text[i] = '\\href{' + text[i] + '}{' + part_of_url + '}';
            }
            if (text[i].match(reg_img)) {
                text[i] = '\\includegraphics[scale=0.7]{' + text[i] + '}';
            }
        }
        text = text.join(' ')
    }
    /* HTML FORM COLLECT*/
    av = document.querySelector('input[name="AV"]:checked').value;
    ac = document.querySelector('input[name="AC"]:checked').value;
    pr = document.querySelector('input[name="PR"]:checked').value;
    ui = document.querySelector('input[name="UI"]:checked').value;
    s = document.querySelector('input[name="S"]:checked').value;
    cc = document.querySelector('input[name="C"]:checked').value;
    ci = document.querySelector('input[name="I"]:checked').value;
    ca = document.querySelector('input[name="A"]:checked').value;
    cvss1 =
        '(AV:' + av +
        '/AC:' + ac +
        '/PR:' + pr +
        '/S:' + s +
        '/C:' + cc +
        '/I:' + ci +
        '/A:' + ca + ')';

    name = document.getElementById("name").value;
    impactf = document.getElementById("impact").value;
    desc = document.getElementById("desc").value;
    rem = document.getElementById("Remediation").value;
    resc = document.getElementById("References").value;
    steps = document.getElementById("Steps").value;
    role = document.getElementById("role").value;
    host = document.getElementById("host").value;
    imp = document.getElementById("imp").value;

    /* OUTPUT*/
    cvss()
    field_evaluation()
    regexing_output()
    document.write(text)
}