function findingGenerator() {
    function cvss() {
        /* CVSS RATING */

        cvss = 0;

        metricWeightAV = 0;
        metricWeightAC = 0;
        metricWeightPR = 0;
        metricWeightUI = 0;

        metricWeightC = 0;
        metricWeightI = 0;
        metricWeightA = 0;

        metricWeightS = 0;

        if (av == 'N') {
            metricWeightAV = 0.85
        }
        if (av == 'A') {
            metricWeightAV = 0.62
        }
        if (av == 'L') {
            metricWeightAV = 0.55
        }
        if (av == 'P') {
            metricWeightAV = 0.2
        }

        if (ac == 'H') {
            metricWeightAC = 0.44
        }
        if (ac == 'L') {
            metricWeightAC = 0.77
        }

        if (pr == 'N') {
            metricWeightPR = 0.85
        }
        if (pr == 'L') {
            metricWeightPR = 0.62
        }
        if (pr == 'H') {
            metricWeightPR = 0.27
        }

        if (ui == 'N') {
            metricWeightUI = 0.85
        }
        if (ui == 'R') {
            metricWeightUI = 0.62
        }

        if (s == 'U') {
            metricWeightS = 6.42
        }
        if (s == 'C') {
            metricWeightS = 7.52
        }

        if (cc == 'N') {
            metricWeightC = 0
        }
        if (cc == 'L') {
            metricWeightC = 0.22
        }
        if (cc == 'H') {
            metricWeightC = 0.56
        }

        if (ci == 'N') {
            metricWeightI = 0
        }
        if (ci == 'L') {
            metricWeightI = 0.22
        }
        if (ci == 'H') {
            metricWeightI = 0.56
        }

        if (ca == 'N') {
            metricWeightA = 0
        }
        if (ca == 'L') {
            metricWeightA = 0.22
        }
        if (ca == 'H') {
            metricWeightA = 0.56
        }

        iss = (1 - ((1 - metricWeightC) * (1 - metricWeightI) * (1 - metricWeightA)));
        impactact = 0;
        if (s == "U") {
            impactact = metricWeightS * iss;
        } else {
            impactact = metricWeightS * (iss - 0.029) - 3.25 * Math.pow(iss - 0.02, 15);
        }
        exploitability = 8.22 * metricWeightAV * metricWeightAC * metricWeightPR * metricWeightUI;
        if (impactact <= 0) {} else {
            if (s == "U") {
                cvss = exploitability + impactact;
            } else {
                cvss = 1.22 * (exploitability + impactact);
            }
        }
        if (cvss > 10) {
            cvss = 10
        }
        cvss = Math.round(cvss * 100) / 100
        if (cvss >= 9) {
            severity = 'Critical'
            color = 'red'
        } else if (cvss >= 7) {
            severity = 'High'
            color = 'red'
        } else if (cvss >= 4) {
            severity = 'Medium'
            color = 'orange'
        } else if (cvss > 0) {
            severity = 'Low'
            color = 'green'
        } else {
            severity = 'Info'
            color = 'cyan'
        }
    }

    function field_evaluation() {
        /* FIELD EVAL. */
        if (cvss != "") {
            cvss = '\\hline Severity: & \\textcolor{' + color + '}{CVSS ' + cvss + ' - ' + severity + '} ' + cvss1 + '\\\\\n';
        }
        if (impact != "") {
            impact = '\\hline Impact: & ' + impact + ' \\\\\n ';
        }
        if (host != "") {
            host = '\\hline Hosts: & ' + host + ' \\\\\n ';
        }
        if (role != "") {
            role = '\\hline Role: &' + role + ' \\\\\n ';
        }
        if (description != "") {
            description = '\\subsubsection*{Description} \\\\ ' + description + ' \\\\\\\\ ';
        }
        if (impactCTF != "") {
            impactCTF = '\\subsubsection*{Bussines impact}\\\\ ' + impactCTF + ' \\\\\\\\ ';
        }
        if (remediation != "") {
            remediation = '\\subsubsection*{Remedation}\\\\ ' + remediation + ' \\\\\\\\ ';
        }
        if (resources != "") {
            resources = '\\subsubsection*{References}\\\\ ' + resources + ' \\\\\\\\ ';
        }
        if (steps != "") {
            steps = '\\subsubsection*{Steps to reproduce}\\\\ ' + steps + ' \\\\\\\\ ';
        }

        let texOutput = `\\subsection{${name}}\n`   +
                        '\\begin{table}[h]\n'       +
                        '\\centering\n'             +
                        '\\begin{tabular}{|l|r|}\n' +
                        `\\rowcolor{${color}}\n`    +
                        '\\hline & \\\\\n'          +
                        cvss                        +
                        impact                      +
                        host                        +
                        role                        +
                        '\\hline\n'                 +
                        '\\end{tabular}\n'          +
                        '\\end{table}\n\n'          +
                        description  + '\n\n'       +
                        impactCTF    + '\n\n'       +        
                        remediation  + '\n\n'       + 
                        resources    + '\n\n'       +
                        steps        + '\n';
        
               return texOutput;
    }

    function replaceAll(source, search, replacement){
        return source.split(search).join(replacement);
    }

    function formatImg(imgPath) {
        return `\\includegraphics[scale=0.7]{${imgPath}}`;
    }
    
    function formatURL(url){
        let urlUnderscoreEscaped = replaceAll(url, '_', "\\_");
        return `\\href{${url}}{${urlUnderscoreEscaped}}\\\\`; // ALL urls will have their label set to original URL
    }

    function formatTex(tex) {
        /* REGEX REPLACING*/
        const reg_url = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
        const reg_img = /\.(gif|jpe?g|tiff?|png|webp|bmp)$/i;
        
        let texFinal = "";
        let listTex  = tex.split(/(\s+)/); //split by any whitespace character, whitespace characters will not be erased 

        for (i = 0; i < listTex.length; i++) {
            if (listTex[i].match(reg_url)) {
                texFinal += formatURL(listTex[i]) + ' ';        
            }
            else if (listTex[i].match(reg_img)) {
                texFinal += formatImg(listTex[i]) + ' ';
            }
            else{
                texFinal += listTex[i];
            }
        }
        return texFinal;
    }


    /* HTML FORM COLLECT*/
    av = document.querySelector('input[name="AV"]:checked').value;
    ac = document.querySelector('input[name="AC"]:checked').value;
    pr = document.querySelector('input[name="PR"]:checked').value;
    ui = document.querySelector('input[name="UI"]:checked').value;
    s = document.querySelector('input[name="S"]:checked').value;
    cc = document.querySelector('input[name="C"]:checked').value;
    ci = document.querySelector('input[name="I"]:checked').value;
    ca = document.querySelector('input[name="A"]:checked').value;
    cvss1 =
        '(AV:' + av +
        '/AC:' + ac +
        '/PR:' + pr +
        '/S:' + s +
        '/C:' + cc +
        '/I:' + ci +
        '/A:' + ca + ')';

    name = document.getElementById("name").value;
    impactCTF = document.getElementById("impact").value;
    description = document.getElementById("desc").value;
    console.log(description);
    remediation = document.getElementById("Remediation").value;
    resources = document.getElementById("References").value;
    steps = document.getElementById("Steps").value;
    role = document.getElementById("role").value;
    host = document.getElementById("host").value;
    impact = document.getElementById("imp").value;

    /* OUTPUT*/
    cvss();


    let texNoformat = field_evaluation();
    let texFormatted = formatTex(texNoformat);

    let texWrapped = '<meta charset="UTF-8">\n'                                                    +
                     '<title>Generator</title>\n'                                                  +
                     '<link rel="stylesheet" href="https://fonts.google.com/specimen/Roboto" />\n' +
                     '<link rel="stylesheet" href="GeneratorStyle.css">'                           +
                     '<textarea  rows="25" cols="100" style="color:black;">'                       +
                     `\n${texFormatted}\n`                                                         + 
                     '</textarea><br><br><br><a href="FindingGenerator.html">Nov√Ω finding</a>';


    document.write(texWrapped);
}
