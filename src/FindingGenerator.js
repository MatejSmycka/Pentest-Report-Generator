function findingGenerator() {
  function cvss() {
      /* CVSS RATING */

      let metricWeightAV = metrics['AV'][metricLetterAV]
      let metricWeightAC = metrics['AC'][metricLetterAC]
      let metricWeightPR = metrics['PR'][metricLetterPR]
      let metricWeightUI = metrics['UI'][metricLetterUI]
      let metricWeightS = metrics['S'][metricLetterS]
      let metricWeightC = metrics['C'][metricLetterC]
      let metricWeightI = metrics['I'][metricLetterI]
      let metricWeightA = metrics['A'][metricLetterA]

      impactScoreCIA = (1 - ((1 - metricWeightC) * (1 - metricWeightI) * (1 - metricWeightA)));
      impactScoreAll = 0;
      if (metricLetterS == "U") {
          impactScoreAll = metricWeightS * impactScoreCIA;
      } else {
          impactScoreAll = metricWeightS * (impactScoreCIA - 0.029) - 3.25 * Math.pow(impactScoreCIA - 0.02, 15);
      }
      exploitability = 8.22 * metricWeightAV * metricWeightAC * metricWeightPR * metricWeightUI;
      if (impactScoreAll <= 0) {} else {
          if (metricLetterS == "U") {
              cvss = exploitability + impactScoreAll;
          } else {
              cvss = 1.22 * (exploitability + impactScoreAll);
          }
      }
      if (cvss > 10) {
          cvss = 10
      }
      cvss = Math.round(cvss * 100) / 100

      switch (true) {
          case (cvss >= 9):
              severity = 'Critical'
              color = 'red'
               break;
          case (cvss >= 7):
              severity = 'High'
              color = 'red'
              break;
          case (cvss >= 4):
              severity = 'Medium'
              color = 'orange'
              break;
          case (cvss > 0):
              severity = 'Low'
              color = 'green'
              break;
          default:
              severity = 'Info'
              color = 'cyan'
              break;
      }
  }
  /*
      \usepackage[T1]{fontenc} in LATEX should solve this issue, but I will keep code because it might come handy later



      function fieldEscapeSpecialChars(text){
      const characters = ['&', '%', '$', '#', '_', '{', '}', '~', '^', '\'']
      for (const [i, Char] of characters.entries()) {
              text = text.replaceAll(Char, '\\' + Char);
          }

      return text
      }
  */


  function field_evaluation() {
      /* FIELD EVAL. */
      if (cvss != "") {
          cvss = '                  \\hline Severity: & \\textcolor{' + color + '}{CVSS ' + cvss + ' - ' + severity + '} ' + cvss1 + '\\\\\n';
      }
      if (impact != "") {
          impact = '                  \\hline Impact: & ' + impact + ' \\\\\n ';
      }
      if (host != "") {
          host = '                 \\hline Hosts: & ' + host + ' \\\\\n ';
      }
      if (role != "") {
          role = '                 \\hline Role: &' + role + ' \\\\\n ';
      }
      if (description != "") {
          description = '\\subsubsection*{Description}\n' + description + '  ';
      }
      if (businessImpact != "") {
          businessImpact = '\\subsubsection*{Bussines impact}\n' + businessImpact + '  ';
      }
      if (remediation != "") {
          remediation = '\\subsubsection*{Remedation}\n' + remediation + '  ';
      }
      if (resources != "") {
          resources = '\\subsubsection*{References}\n' + resources + '  ';
      }
      if (steps != "") {
         /* steps = fieldEscapeSpecialChars(steps) */
          steps = '\\subsubsection*{Steps to reproduce}\n' + steps + '  ';
      }

      let texOutput = `\\subsection{${name}}\n\n`   +
                      '\\begin{table}[h]\n'       +
                      '        \\centering\n'             +
                      '        \\begin{tabular}{|l|r|}  ' +
                      `\\rowcolor{${color}}\n`    +
                      '                  \\hline & \\\\\n'          +
                      cvss                        +
                      impact                      +
                      host                        +
                      role                        +
                      '                 \\hline\n'                 +
                      '        \\end{tabular}\n'          +
                      '\\end{table}  \\vspace{-7mm} \n\n'          +
                      description  + '\n\n'       +
                      businessImpact    + '\n\n'  +        
                      remediation  + '\n\n'       + 
                      resources    + '\n\n'       +
                      steps        + '\n';
      
             return texOutput;
  }

  function replaceAll(source, search, replacement){
      return source.split(search).join(replacement);
  }

  function formatImg(imgPath) {
      return `\\includegraphics[scale=0.7]{${imgPath}}`;
  }

   function formatURL(url){
      let urlUnderscoreEscaped = replaceAll(url, '_', "\\_");
      return `\\href{${url}}{${urlUnderscoreEscaped}}\\\\`; // ALL urls will have their label set to original URL
  }

  function formatTex(tex) {
      /* REGEX REPLACING*/
      const reg_url = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
      const reg_img = /\.(gif|jpe?g|tiff?|png|webp|bmp)$/i;

      let texFinal = "";
      let listTex  = tex.split(/(\s+)/); //split by any whitespace character, whitespace characters will not be erased

      for (i = 0; i < listTex.length; i++) {
          if (listTex[i].match(reg_url)) {
              texFinal += formatURL(listTex[i]) + ' ';
          }
          else if (listTex[i].match(reg_img)) {
              texFinal += formatImg(listTex[i]) + ' ';
          }
          else{
              texFinal += listTex[i];
          }
      }
      return texFinal;

  }

  metrics = {
          AV : {'N':0.85,'A':0.62,'L':0.55,'P':0.2},
          AC : {'H':0.44,'L':0.77},
          PR : {'N':0.85,'L':0.62,'H':0.27},
          UI : {'N':0.85,'R':0.62},
          C : {'N':0,'L':0.22,'H':0.56},
          I : {'N':0,'L':0.22,'H':0.56},
          A : {'N':0,'L':0.22,'H':0.56},
          S : {'U':6.42,'C':7.52}
      }
  /* HTML FORM COLLECT*/
  metricLetterAV  = document.querySelector('input[name="AV"]:checked').value;
  metricLetterAC  = document.querySelector('input[name="AC"]:checked').value;
  metricLetterPR  = document.querySelector('input[name="PR"]:checked').value;
  metricLetterUI  = document.querySelector('input[name="UI"]:checked').value;
  metricLetterS  = document.querySelector('input[name="S"]:checked').value;
  metricLetterC  = document.querySelector('input[name="C"]:checked').value;
  metricLetterI  = document.querySelector('input[name="I"]:checked').value;
  metricLetterA  = document.querySelector('input[name="A"]:checked').value;
  cvss1 =
      '(AV:' + metricLetterAV +
      '/AC:' + metricLetterAC +
      '/PR:' + metricLetterPR +
      '/UI:' + metricLetterUI +
      '/S:' + metricLetterS +
      '/C:' + metricLetterC +
      '/I:' + metricLetterI +
      '/A:' + metricLetterA + ')';


  name = document.getElementById("name").value;
  businessImpact = document.getElementById("impact").value;
  description = document.getElementById("desc").value;
  remediation = document.getElementById("Remediation").value;
  resources = document.getElementById("References").value;
  steps = document.getElementById("Steps").value;
  role = document.getElementById("role").value;
  host = document.getElementById("host").value;
  impact = document.getElementById("imp").value;
  /* OUTPUT*/
  cvss();


  let texNoformat = field_evaluation();
  let texFormatted = formatTex(texNoformat);

  let texWrapped = '<meta charset="UTF-8">\n'                                                    +
                   '<title>Generator</title>\n'                                                  +
                   '<link rel="stylesheet" href="https://fonts.google.com/specimen/Roboto" />\n' +
                   '<link rel="stylesheet" href="GeneratorStyle.css">'                           +
                   '<textarea  rows="25" cols="100" style="color:black;">'                       +
                   `\n${texFormatted}\n`                                                         + 
                   '</textarea><br><br><br><a href="FindingGenerator.html">Nov√Ω finding</a>';


  document.write(texWrapped);
}
