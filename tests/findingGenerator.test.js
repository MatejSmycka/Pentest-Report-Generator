const {
    cvssCompute
} = require("../src/main");
const {
    formatTex,
    formatURL
} = require("../src/parser");

describe("cvss testing", () => {
    var metrics = {
        AV: {
            'N': 0.85,
            'A': 0.62,
            'L': 0.55,
            'P': 0.2
        },
        AC: {
            'H': 0.44,
            'L': 0.77
        },
        PR: {
            'U': {
                'N': 0.85,
                'L': 0.62,
                'H': 0.27
            },
            'C': {
                'N': 0.85,
                'L': 0.68,
                'H': 0.5
            }
        },
        UI: {
            'N': 0.85,
            'R': 0.62
        },
        C: {
            'N': 0,
            'L': 0.22,
            'H': 0.56
        },
        I: {
            'N': 0,
            'L': 0.22,
            'H': 0.56
        },
        A: {
            'N': 0,
            'L': 0.22,
            'H': 0.56
        },
        S: {
            'U': 6.42,
            'C': 7.52
        }
    };
    test('test: basic usage', () => {
        expect(
            cvssCompute(
                metrics['AV']['N'],
                metrics['AC']['H'],
                metrics['PR']['U']['L'],
                metrics['UI']['R'],
                metrics['S']['U'],
                metrics['C']['L'],
                metrics['I']['N'],
                metrics['A']['H'], 'U')
        ).toBe(5.4)
    })
    test('test: scope unchanged', () => {
        expect(
            cvssCompute(
                metrics['AV']['N'],
                metrics['AC']['L'],
                metrics['PR']['U']['L'],
                metrics['UI']['R'],
                metrics['S']['U'],
                metrics['C']['L'],
                metrics['I']['N'],
                metrics['A']['H'], 'U')
        ).toBe(6.3)
    })
    test('test: scope changed', () => {
        expect(
            cvssCompute(
                metrics['AV']['N'],
                metrics['AC']['L'],
                metrics['PR']['C']['L'],
                metrics['UI']['R'],
                metrics['S']['C'],
                metrics['C']['L'],
                metrics['I']['N'],
                metrics['A']['H'], 'C')
        ).toBe(7.6)
    })
    test('test: lowest possible', () => {
        expect(
            cvssCompute(
                metrics['AV']['P'],
                metrics['AC']['H'],
                metrics['PR']['U']['H'],
                metrics['UI']['R'],
                metrics['S']['U'],
                metrics['C']['N'],
                metrics['I']['N'],
                metrics['A']['N'], 'U')
        ).toBe(0.0)
    })
    test('test: highest possible', () => {
        expect(
            cvssCompute(
                metrics['AV']['N'],
                metrics['AC']['L'],
                metrics['PR']['C']['N'],
                metrics['UI']['N'],
                metrics['S']['C'],
                metrics['C']['H'],
                metrics['I']['H'],
                metrics['A']['H'], 'C')
        ).toBe(10.0)
    })
})

describe("formatTex() testing", () => {
    test('test: fhdjsagdhas fedsfds ghkdhk.png ', () => {
        expect(
            formatTex('hdjsagdhas fedsfds ghkdhk.png')
        ).toBe('hdjsagdhas fedsfds \\includegraphics[scale=0.7]{ghkdhk.png} ')
    })
    test('test: hdjs_gdha_g_hkdhk.jpg ', () => {
        expect(
            formatTex('hdjs_gdha_g_hkdhk.jpg')
        ).toBe('\\includegraphics[scale=0.7]{hdjs_gdha_g_hkdhk.jpg} ')
    })
})

describe("formatURL() testing", () => {
    test('test: formatURL() ', () => {
        expect(
            formatTex('https://cs.overleaf.com/learn/latex/Inserting_Images')
        ).toBe('\\href{https://cs.overleaf.com/learn/latex/Inserting_Images}{https://cs.overleaf.com/learn/latex/Inserting\\_Images}\\\\ ')
    })
})
